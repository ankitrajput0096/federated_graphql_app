"""
Custom scalar for GPA (validated float)
"""
scalar GPA

"""
Directive to add metadata to types
"""
directive @metadata(tag: String) on INTERFACE

"""
Interface for types that can be rated
"""
interface Rateable @metadata(tag: "ratable") {
    """
    Get rating with optional filter
    """
    rating(filter: Int): Int
}

"""
Grade object representing a student's academic performance
"""
type Grade implements Rateable {
    studentId: String!
    grade: String!
    gpa: GPA!
    """
    Rating derived from GPA, filtered by minimum value
    """
    rating(filter: Int): Int
}

"""
Student type with grade information
"""
type Student {
    id: ID!
    text: String
    starRating: Int!
    grade: Grade!
    status: GradeLevel!
}

"""
Query type for student-related operations
"""
type Query {
    """
    Fetch students by university ID
    """
    student(universityId: ID!): [Student!]!
    """
    Fetch all students across all universities
    """
    allStudents: [Student!]!
}

"""
Mutation type for student-related operations
"""
type Mutation {
    """
    Add a new student to a university
    """
    addStudent(input: StudentInput!): Student!
    """
    Update an existing student's details
    """
    updateStudent(input: StudentInput!): Student!
}

"""
Subscription type for student-related updates
"""
type Subscription {
    """
    Subscribe to student updates for a student
    """
    studentUpdated(studentId: ID!): Student!
}

"""
University type extended for federation
"""
type University @key(fields: "id") @extends {
    id: ID! @external
    student: [Student!]!
}

"""
Enum for grade levels
"""
enum GradeLevel {
    A
    B
    C
}

"""
Input object for adding or updating a student
"""
input StudentInput {
    id: ID!
    text: String
    starRating: Int!
    universityId: ID!
    status: GradeLevel!
    grade: GradeInput
}

"""
Input object for grade information
"""
input GradeInput {
    studentId: String!
    grade: String!
    gpa: GPA!
}