schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  STUDENTS @join__graph(name: "students", url: "http://students:8081/graphql")
  TEACHERS @join__graph(name: "teachers", url: "http://teachers:8082/graphql")
  UNIVERSITY @join__graph(name: "university", url: "http://university:8080/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: STUDENTS)
  @join__type(graph: TEACHERS)
  @join__type(graph: UNIVERSITY)
{
  student(universityId: ID!): [Student!]! @join__field(graph: STUDENTS)
  allStudents: [Student!]! @join__field(graph: STUDENTS)
  teacher(universityId: ID!): [Teacher!]! @join__field(graph: TEACHERS)
  allTeachers: [Teacher!]! @join__field(graph: TEACHERS)
  university(id: ID!): University @join__field(graph: UNIVERSITY)
  universities: [University!]! @join__field(graph: UNIVERSITY)
}

type Student
  @join__type(graph: STUDENTS)
{
  id: ID!
  text: String
  starRating: Int!
}

type Teacher
  @join__type(graph: TEACHERS)
{
  id: ID!
  text: String
  starRating: Int!
}

type University
  @join__type(graph: STUDENTS, key: "id", extension: true)
  @join__type(graph: TEACHERS, key: "id", extension: true)
  @join__type(graph: UNIVERSITY, key: "id")
{
  id: ID!
  student: [Student!]! @join__field(graph: STUDENTS)
  teacher: [Teacher!]! @join__field(graph: TEACHERS)
  name: String! @join__field(graph: UNIVERSITY)
  description: String @join__field(graph: UNIVERSITY)
}
